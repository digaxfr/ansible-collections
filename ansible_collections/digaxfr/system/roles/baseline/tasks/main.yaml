---
- name: Set hostname
  ansible.builtin.hostname:
    name: "{{ inventory_hostname }}"

- name: Template out /etc/hosts file
  ansible.builtin.template:
    src: hosts.j2
    dest: /etc/hosts
    owner: root
    group: root
    mode: "0644"

- name: Install base packages
  ansible.builtin.apt:
    name: "{{ baseline_debian_packages }}"
    state: present
  when: ansible_distribution == "Debian"

- name: Install base packages (Archlinux)
  community.general.pacman:
    name: "{{ baseline_archlinux_packages }}"
    state: present
  when: ansible_distribution == "Archlinux"

- name: Discover unwanted systemd services
  ansible.builtin.command:
    systemctl list-unit-files {{ disable_systemd_services | join(" ") }} -o json
  changed_when: false
  failed_when: false
  register: _disable_systemd_services

- name: Disable unwanted systemd services
  ansible.builtin.systemd:
    name: "{{ item.unit_file }}"
    enabled: false
    state: stopped
  loop: "{{ _disable_systemd_services.stdout | from_json }}"
  loop_control:
    label: "{{ item.unit_file }}"

# I am not building for perfection here. At this point, a reboot may be necessary to cleanly remove Armbian's zram and ramlog configs.
# In a perfect world, the install image would not even have this.

- name: Template zram generator configuration
  ansible.builtin.template:
    src: zram-generator.conf.j2
    dest: /etc/systemd/zram-generator.conf
    owner: root
    group: root
    mode: "0644"

- name: Start zram generator
  ansible.builtin.systemd:
    name: systemd-zram-setup@zram0
    state: started
    daemon_reload: true

- name: Start zram device
  ansible.builtin.systemd:
    name: /dev/zram0
    state: started
