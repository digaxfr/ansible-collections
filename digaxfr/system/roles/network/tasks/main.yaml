---
- name: NetworkManager configurations
  ansible.builtin.template:
    src: 10-managed-devices.conf.j2
    dest: /etc/NetworkManager/conf.d/10-managed-devices.conf
    owner: root
    group: root
    mode: '0644'
  notify: restart NetworkManager

- name: Flush handlers
  ansible.builtin.meta: flush_handlers

# In the future, add production/ethernet interfaces here.

# Leaving this in here. Apparently when doing an include with the funky
# business on the loop line, Ansible will run serial=1 essentially on the
# includes.
#- name: Configure vlan interfaces
#  ansible.builtin.include_tasks: vlan.yaml
#  loop: '{{ host_networking.interfaces | dict2items | selectattr("value.type", "==", "vlan") }}'
#  when: '_interface.value.type == "vlan"'
#  loop_control:
#    loop_var: _interface

# We do != ethernet for now because I am too lazy.
- name: Template out configs
  ansible.builtin.template:
    src: '{{ _interface.value.type }}.nmconnection.j2'
    dest: /etc/NetworkManager/system-connections/{{ _interface.key }}.nmconnection
    owner: root
    group: root
    mode: '0600'
  loop: '{{ host_networking.interfaces | dict2items | selectattr("value.type", "!=", "ethernet") }}'
  loop_control:
    loop_var: _interface
  notify: restart NetworkManager

# This allows us to forcibly bring up bridge interfaces.
- name: Template out dummy-bridge configs
  ansible.builtin.template:
    src: dummy-bridge.nmconnection.j2
    dest: /etc/NetworkManager/system-connections/dummy-{{ _interface.key }}.nmconnection
    owner: root
    group: root
    mode: '0600'
  loop: '{{ host_networking.interfaces | dict2items | selectattr("value.type", "==", "bridge") }}'
  loop_control:
    loop_var: _interface
  notify: restart NetworkManager

- name: Flush handlers
  ansible.builtin.meta: flush_handlers

# For above, alternatively we can be lazy and just restart NetworkManager. YOLO.

# TODO: This doesn't work with changes; need to down and up the connection.
#- name: Load config
#  ansible.builtin.command: |-
#    nmcli conn load /etc/NetworkManager/system-connections/{{ item._interface.key }}.nmconnection
#  loop: '{{ _net_config.results }}'
#  loop_control:
#    label: '{{ item._interface.key }}'
#  when: 'item.changed'
